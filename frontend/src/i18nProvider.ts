//Source code generated by AppGPT (www.appgpt.tech)
import { mergeTranslations } from 'ra-core';
import polyglotI18nProvider from 'ra-i18n-polyglot';
import enOriginal from 'ra-language-english';
import frOriginal from 'ra-language-french';

const enResources = {
  resources: {
    Users: {
      name: 'Users',
      fields: {
        userId: 'User Id',
        name: 'Name',
        email: 'Email',
        password: 'Password',
        role: 'Role',
        id: 'id',
      },
    },
    Employees: {
      name: 'Employees',
      fields: {
        employeeId: 'Employee Id',
        firstName: 'First Name',
        lastName: 'Last Name',
        middleName: 'Middle Name',
        dateOfBirth: 'Date Of Birth',
        gender: 'Gender',
        nationality: 'Nationality',
        maritalStatus: 'Marital Status',
        contactInformation: 'Contact Information',
        address: 'Address',
        department: 'Department',
        position: 'Position',
        manager: 'Manager',
        employmentType: 'Employment Type',
        startDate: 'Start Date',
        endDate: 'End Date',
        salaryInformation: 'Salary Information',
        profilePicture: 'Profile Picture',
        id: 'id',
      },
    },
    Evaluations: {
      name: 'Evaluations',
      fields: {
        reviewId: 'Review Id',
        employeeId: 'Employee Id',
        periodStart: 'Period Start',
        periodEnd: 'Period End',
        goalsObjectives: 'Goals Objectives',
        achievements: 'Achievements',
        improvementAreas: 'Improvement Areas',
        feedbackFromSupervisor: 'Feedback From Supervisor',
        overallRating: 'Overall Rating',
        recommendations: 'Recommendations',
        id: 'id',
      },
    },
    Payroll: {
      name: 'Payroll',
      fields: {
        payrollId: 'Payroll Id',
        employeeId: 'Employee Id',
        periodStartDate: 'Period Start Date',
        periodEndDate: 'Period End Date',
        grossSalary: 'Gross Salary',
        deductions: 'Deductions',
        netSalary: 'Net Salary',
        payDate: 'Pay Date',
        overtimeHours: 'Overtime Hours',
        overtimePay: 'Overtime Pay',
        id: 'id',
      },
    },
    LeaveRequests: {
      name: 'Leave Requests',
      fields: {
        requestId: 'Request Id',
        employeeId: 'Employee Id',
        typeOfLeave: 'Type Of Leave',
        startDate: 'Start Date',
        endDate: 'End Date',
        reason: 'Reason',
        approvalStatus: 'Approval Status',
        approverUserId: 'Approver User Id',
        id: 'id',
      },
    },
  },
};
const frResources = {
  resources: {
    Users: {
      name: 'Users (fr)',
      fields: {
        userId: 'User Id (fr)',
        name: 'Name (fr)',
        email: 'Email (fr)',
        password: 'Password (fr)',
        role: 'Role (fr)',
        id: 'id',
      },
    },
    Employees: {
      name: 'Employees (fr)',
      fields: {
        employeeId: 'Employee Id (fr)',
        firstName: 'First Name (fr)',
        lastName: 'Last Name (fr)',
        middleName: 'Middle Name (fr)',
        dateOfBirth: 'Date Of Birth (fr)',
        gender: 'Gender (fr)',
        nationality: 'Nationality (fr)',
        maritalStatus: 'Marital Status (fr)',
        contactInformation: 'Contact Information (fr)',
        address: 'Address (fr)',
        department: 'Department (fr)',
        position: 'Position (fr)',
        manager: 'Manager (fr)',
        employmentType: 'Employment Type (fr)',
        startDate: 'Start Date (fr)',
        endDate: 'End Date (fr)',
        salaryInformation: 'Salary Information (fr)',
        profilePicture: 'Profile Picture (fr)',
        id: 'id',
      },
    },
    Evaluations: {
      name: 'Evaluations (fr)',
      fields: {
        reviewId: 'Review Id (fr)',
        employeeId: 'Employee Id (fr)',
        periodStart: 'Period Start (fr)',
        periodEnd: 'Period End (fr)',
        goalsObjectives: 'Goals Objectives (fr)',
        achievements: 'Achievements (fr)',
        improvementAreas: 'Improvement Areas (fr)',
        feedbackFromSupervisor: 'Feedback From Supervisor (fr)',
        overallRating: 'Overall Rating (fr)',
        recommendations: 'Recommendations (fr)',
        id: 'id',
      },
    },
    Payroll: {
      name: 'Payroll (fr)',
      fields: {
        payrollId: 'Payroll Id (fr)',
        employeeId: 'Employee Id (fr)',
        periodStartDate: 'Period Start Date (fr)',
        periodEndDate: 'Period End Date (fr)',
        grossSalary: 'Gross Salary (fr)',
        deductions: 'Deductions (fr)',
        netSalary: 'Net Salary (fr)',
        payDate: 'Pay Date (fr)',
        overtimeHours: 'Overtime Hours (fr)',
        overtimePay: 'Overtime Pay (fr)',
        id: 'id',
      },
    },
    LeaveRequests: {
      name: 'Leave Requests (fr)',
      fields: {
        requestId: 'Request Id (fr)',
        employeeId: 'Employee Id (fr)',
        typeOfLeave: 'Type Of Leave (fr)',
        startDate: 'Start Date (fr)',
        endDate: 'End Date (fr)',
        reason: 'Reason (fr)',
        approvalStatus: 'Approval Status (fr)',
        approverUserId: 'Approver User Id (fr)',
        id: 'id',
      },
    },
  },
};

const en = mergeTranslations(enOriginal, enResources);
const fr = mergeTranslations(frOriginal, frResources);

const translations = { en, fr };
export const i18nProvider = polyglotI18nProvider(
  (locale) => translations[locale],
  'en', //default locale
  [
    { locale: 'en', name: 'English' },
    { locale: 'fr', name: 'Fran√ßais' },
  ],
);
